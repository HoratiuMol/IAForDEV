//contiein una lista de expresiones difusas como premisas (la parte previa del "THEN") 
//y una expresion difusa como conlusion

import java.util.ArrayList;

//representa regla difusa con varias premisas
//y una conclusion
public class ReglaDifusa{
    protected ArrayList<ExpresionDifusa> premisas;
    protected ExpresionDifusa conclusion;

    //constructor
    public ReglaDifusa(ArrayList<ExpresionDifusa> _premisas ExpresionDifusa _conclusion){
        premisas=_premisas;
        conclusion=_conclusion;
    }

    //aplicar la regla a un problema numerico conreto
    //esto produce un conjunto difuso
    ConjuntoDifuso Aplicar(ArrayList<ValorNumerico> problema){
        double grado=1;
        //se busca el grado de cada premisa
        for(ExpresionDifusa premisa:premisas){
            double gradoLocal=0;
            ValorLinguistico v1=null;
            //se recupera el valor para esta premisa
            //es el problema a resolver
            for(ValorNumerico pb:problema){
                if(premisa.varL.equals(pb.va)){
                    //encontramos el dato correcto del problema,
                    //se recuepra su pertenencia
                    v1=
                    premisa.varL.ValorLinguisticoPorNombre(premisa.nombreValorLinguistico);
                    if(v1!=null){
                        gradoLocal=v1.ValorDePertenencia(pb.valor);
                        break;
                    }
                }
            }
            if(v1==null){
                //nos falta al menos un dato
                //de modo que no podemos resolver
                return null;
            }
            //se guarda el dato min
            grado=Math.min(grado, gradoLocal);
        }
        return conclusion.varL.ValorLinguisticoPorNombre(conclusion.nombreValorLinguistico).conjuntoDifuso.MultiplicarPor(grado);
    }

    //añadimos un metodo(constructor) que descompone la regla regla difusa en premisas y conclusiones, y descompone cada 
    //parte a continuación con funciones de manipulacion de cadenas "spliit", "toUpper" y "replaceFirst"
    //constructor a partir de una cadena de caracteres
    public ReglaDifusa(String reglastr, ControladorDifuso controlador){
        //paso de la reglas en mayúsculas
        reglastr=reglastr.toUpperCase();

        //separacion de las premisas
        String[] regla=reglastr.split(" THEN ");
        if(regla.length==2){
            //se trata de premisas quitando el IF
            //y liuego separando por los AND
            regla[0]=regla[0].repla("IF","").trim();
            String[] premisasStr=regla[0].split(" AND ");
            premisas= new ArrayList();
            for(String exp:premisasStr){
                //se divide por la palabra clave IS
                //y se crea una expresion difusa
                String[] partes=exp.trim().split(" IS ");
                if(partes.length==2){
                    ExpresionDifusa expDifusa=new 
ExpresionDifusa(controlador.VariableLinguisticaPorNombre(partes[0]), parte[1]);
                }
            }
        }
    }

    //agreagamos una regla(formato texto) a partir de una cadena de caracteres
    public void AgregarRegla(String reglastr){
        ReglaDifusa regla=new ReglaDifusa(reglastr, this);
        reglas.add(regla);
    }
}