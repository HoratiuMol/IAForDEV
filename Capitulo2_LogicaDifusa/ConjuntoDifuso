//la clase mas importante tanto a nivel de código como a nivel  de funcinoalidad
//pues es la que comtrola el sistema difuso
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.StringJoiner;

public class ConjuntoDifuso{
    protected ArrayList<Punto2D> puntos;
    protected double min;
    protected double max;

    //constructor
    public ConjuntoDifuso(double _min, double _max){
        puntos = new ArrayList();
        min = _min;
        max= _max;
    }
    //agregar un punto
    public void Agregar(Punto2D pt){
        puntos.add(pt);
        Collections.sort(puntos);
    }

    public void Agregar(double x, double y){
        Punto2D pt=new Punto2D(x,y);
        Agregar(pt);
    }
    //metodo toString quemuestra el intervalo de valores y los distintos puntos registrados en el sisteam
    @Override
    public String toString(){
        StringJoiner sj=new StringJoiner(" ");
        sj.add("["+min+"-"+max+"]:");
        for( Punto2D pt:puntos){
            sj.add(pt.toString());
        }
        return sj.toString();
    }

    //operador de comparacion(/comapracion de cadenas)
    @Override
    public boolean equals(Object pt2){
        return toString().equals(((Punto2D)pt2).toString());
    }
    //operador de multiplicacion
    public ConjuntoDifuso MultiplicarPor(double valor){
        ConjuntoDifuso conjunto=new ConjuntoDifuso(min,max);
        for(Punto2D pt:puntos){
            conjunto.Agregar(pt.x,pt.y*valor);
        }
        return conjunto;
    }
    //codificamos el operador NOT
    public ConjuntoDifuso No(){
        ConjuntoDifuso conjunto=new ConjuntoDifuso(min,max);
        for(Punto2D pt: puntos){
            conjunto.Agregar(pt.x,1-pt.y);
        }
        return conjunto;
    }
    /*para el siguietne metdoo debemos complciarlo mas ya que tenemos que determinar un GRADO DE PERTENENCIA
    , necesario para la fuzzificación.
    Tres Casos
        1.Valor fuera del intervalo: grado pertenencia nulo
        2.existe un valor para este pnto dentro del conjunto difuso: devolvemos el grado registrado
        3. no hay definido ningun punto para este valor, interpolamos el grado de pertenencia. Necesitamos
            el punto inmediatamente anterior y el punto inmediatamente posterior
    */
   //calculamos el grado de pertenencia de un punto
   public double ValorDePertenencia(double valor){
    //vaso1: al exterior del intervalo del conjunto difuso
    if(valor < min || valor || max || puntos.size()<2){
        return 0;
    } 
    Punto2D ptAntes= puntos.get(0);
    Punto2D ptDespues=puntos.get(1);
    int index=0;
    while(valor>=ptDespues.x){
        index++;
        ptAntes=ptDespues;
        ptDespues=puntos.get(index);
    }
    if (ptAntes.x==valor){
        //tenemos un punto para este valor
        return ptAntes.y;
    }
    else{
        //se aplica la interpolacion
        return ((ptAntes.y-ptDespues.y)*(ptDespues.x-valor)/(ptDespues.x-ptAntes.x)+ptDespues.y);
    }
   }
   //los metodos de arriba permiten calcular la intersección y la unión de los conjuntos difusos, los operadores AND (&) y OR(||),
   //siendo operadores de Zadeh

   //metodo min max
   //funcion generica FUSIONAR que permite fusionar dos conjuntos gracias a un método óptimo cyu nombre es el parametro
   private static double Optimo(double valor1, double valor2, String metodo){
    if(metodo.equals("min")){
        return Math.min(valor1, valor2);
    }
    else{
        return Math.max(valor1, valor2)
    }
   }

   //metodo generico 
   private static ConjuntoDifuso Fusionar(ConjuntoDifuso c1, ConjuntoDifuso c2, String metodo){
    //código tras primero diseñr los peradores Y/O
    //se crea el resultado
    ConjuntoDifuso resultado=new ConjuntoDifuso(Math.min(c1.min,c2.min), Math.max(c1.max,c2.max));

    //se van a recorrer las listas mediante los iteradores
    Iterator<Punto2D> iterador1=c1.puntos.iterador();
    Punto2D ptConjunto1=iterador1.next();
    Punto2D antiguoPtConjunto1=ptConjunto1;
    Iterator<Punto2D> iterador2=c2.puntos.iterador();
    Punto2D ptConjunto2=iterador2.next();

    //Se calcula la posicion relativa de las dos curvas
    int antiguaPosicionRelativa;
    int nuevaPosicionRelativa=(int)
math.signum(ptConjunto1.y - ptConjunto2.y);

    boolean lista1terminada=false;
    boolean lista2terminada=false;
    //bucle sobre todos los puntos de ambas collecciones
    while(!lista1terminada && !lisita2terminada){
        //se recuperan las abcisas de los puntos en cursoo
        double x1=ptConjunto1.x;
        double x2=ptConjunto2.x;

        //calculo de las posiciones relativas
        antiguaPosicionRelativa=nuevaPosicionRelativa;
        nuevaPosicionRelativa=(int)
Math.signum(ptConjunto1.y-ptConjunto2.y);
    /*las curvas están invertidas=?
    si no, se tiene un solo punto 
    a tener en cuenta?
    */
   if(antiguaPosicionRelativa != nuevaPosicionRelativa && antiguaPosicionRelativa != && nuevaPosicionRelativa !=0){
    //se debe calcular el punto de interseccion
    double x=(x1 ==x2 ? antiguoPtConjunto1.x : math.min(x1,x2));
    double xPrima=Math.max(x1,x2);

    //calculo de las pendientes
    double p1=c1.ValorDePertenencia(xPrima)-c1.ValorDePertenencia(x)/(xPrima-x);
    double p2=c2.ValorDePertenencia(xPrima)-x2.ValorDePertenencia(x)/(xPrima-x);
    //calculo de la delta
    double delta=0;
    if((p2-p1) !=0){
        delta=(c2.ValorDePertenencia(x)-c1.ValorDePertenencia(x))/(p1-p2);
    }

    //se agrega un punto de interseccióni al resultado
    resultado.Agregar(x+delta,c1.ValorDePertenencia(x+delta));

    //se pasa al punto siguiente
    if(x1<x2){
        antiguoPtConjunto1=ptConjunto1;
        if(iterador1.hasNext()){
            ptConjunto1=iterador1.next();
        }else{
            lista1terminada=true;
            ptConjunto1=null;
        }
    }else if(x1>x2){
        if(iterador2.hasNext()){
            ptConjunto2=iterador2.next();
        }else{
            ptConjunto2=null;
            lista2terminada=true;
        }
    }else if(x1==x2){
        //dos puntos en la misma abscisa
        //agrupamos el bueno, el malo no
        resultado.Agregar(x1, Optimo(ptConjunto1.y,ptConjunto2.y, metodo));

        //se pasa al siguiente punto
        if(iterador1.hasNext()){
            antiguoPtConjunto1=ptConjunto1;
            ptConjunto1=iterador1.next();
        }else{
            ptConjunto1=null;
            lista1terminada=true;
        }if(iterador2.hasNext()){
            ptConjunto2=iterador2.next();
        }else{
            ptConjunto2=null;
            lista2terminada=true;
        }
    }else if(x1<x2){
        //la curva c1 tiene un punto antes
        //se calcula el grado para el segundo
        //y se guarda el bueno
        resultado.Agregar(x1,Optimo(ptConjunto1.y, c2.ValorDePertenencia(x1), metodo));
        //se desplaza
        if(iterador1.hasNext()){
            antiguoPtConjunto1=ptConjunto1;
            ptConjunto1=iterador1.next();
        }else{
            ptConjunto1=null;
            lista1terminada=true;
        }
    }else{
        //ultimo caso, la cruva c2 tiene un punto antes
        //se calcula el grado para el priomero y se guarda el bueno
        resultado.Agregar(x2, optimo(c1.ValorDePertenencia(x2), ptConjunto2.y, metodo));
        //se desplaza
        if(iterador2.hasNext()){
            ptConjunto2=iterador2.next();
        }else{
            ptConjunto2=null;
            lista2terminada=true;
        }
    }
   }
   //aqui se ha terminado una de las listas
   //se agreagan los puntos restantes
   if(!lista1terminada){
    while(iterador1.hasNext()){
        ptConjunto1=iterador1.next();
        resultado.Agregar(ptConjunto1.x, Optimo(ptConjunto1.y,o,metodo));
    }
   }else if(!lista2terminada){
    while(iterador2.hasNext()){
        ptConjunto2=iterador2.next();
        resultado.Agregar(ptConjunto2.x, Optimo(ptConjunto2.y, 0 ,metodo));
    }
   }
   return resultado;
    }
   }

   //OPERADOR Y
   public ConjuntoDifuso Y(ConjuntoDifuso c2){
    return Fusionar(this,c2,"Min");
   }

   //OPERADOR O
   public ConjuntoDifuso O(ConjuntoDifuso c2){
    return Fusionar(this,c2,"Max");
   }

   //se calcula el baricentro de las coordenadsa de los centroides y estas formas.
   //para cada coordebadas de su centroide y su area, se realizan divisiones para obtener la abcissa.
   public double Baricentro(){
    //si hay menos de dos puntos, no hay braicentro
    if(puntos.size()<=2){
        return 0;
    }
    else{
        //inmcializacion de las areas
        double areaPonderada=0;
        double areaTotal=0;
        double areaLocal;
        //recorrer la lista conservadn o2 puntos
        Punto2D antiguoPt=null;
        for(Punto2D pt:puntos){
            if(antiguoPt.y==pt.y){
                //es un rectangulo, el baricentro esta en centro
                areaLocal=pt.y*(pt.x-antiguPt.x);
                areaTotal+=areaLocal;
                areaPonderada += areaLocal*((pt.x-antiguoPt.x)/2.0+antiguoPt.x);
                }else{
                    //es un trapecio qyue podemos descomponer
                    //rectangulo - triangulo
                    //rectangulo adicional
                    //separamos formas
                    //primer tiempo : rectangulo
                    areaLocal=Math.min(pt.y, antiguoPt.y)*(pt.x-antiguoPt.x);
                    areaTotal +=areaLocal;
                    areaPonderada+=areaLocal*((pt.x-antiguPt.x)/2.0+antiguoPt.x);
                    //segundo tiempo:triangulo rectangulo
                    areaLocal=(pt.x-antiguoPt.x)*Math.abs(pt.y-antiguoPt.y)/2.0;
                    areaTotal+=areaLocal;
                    if(pt.y>antiguoPt.y){
                        //baricentro a 1/3 del lado pt
                        areaPonderada+=areaLocal*(2.0/3.0*(pt.x-antiguoPt.x)+antiguoPt.x);
                    }else{
                        //baricentro a 1/3 del lado antiguoPt
                        areaPonderada+=areaLocal*(1.0/3.0*(pt.x-antiguPt.x)+antiguoPt.x);
                    }
                }
        }
        antiguoPt=pt;
    }
    //devovlemos las coordebnadas del baricentro
    return areaPonderada/areaTotal;
   }
}